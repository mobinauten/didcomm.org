{"componentChunkName":"component---src-templates-search-search-tsx","path":"/search/","result":{"pageContext":{"allProtocols":[{"slug":"basicmessage/1.0/","title":"Basic Message","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"1.0","status":"Production","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","modifiedDate":"Tue Oct 26 2021 16:32:25 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/basicmessage/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0095-basic-message"},{"slug":"basicmessage/2.0/","title":"BasicMessage","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","modifiedDate":"Sat Oct 09 2021 16:06:28 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/basicmessage/2.0","html":"Roles\nThere are two roles in this protocol: sender and receiver. It is anticipated that both roles are supported by agents that provide an interface for humans, but it is possible for an agent to only act as a sender (do not process received messages) or a receiver (will never send messages).\nConnectivity\nThere are no assumptions about this protocol. It can be used to send a message, and there is no protocol level expectation of a response.\nStates\nThere are not really states in this protocol, as sending a message leaves both parties in the same state they were before.\nBasic Walkthrough\nUsing this protocol, either party can send a message to the other at any time. There are no rules about taking turns or requiring a response.\nMessages are assumed to be made visible to the recipient or evaluated by automated processes.\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\n|       \n                 |\n\nMessage Reference\nmessage\nMessage Type URI: https://didcomm.org/basicmessage/2.0/message\nThe message message is sent by the sender to the recipient. Note that the role is only specific to the creation of messages, and that both parties may play both roles.\nAttributes:\ncontent - content of the user intended message.\nSupported decorators/headers:\n\nThe message should indicate the language used in the message. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.\nThe time the message is sent must be included. DIDComm V2 uses the created_time header. DIDComm V1 must include a sent_time as a message attribute containing the timestamp in ISO 8601 UTC format.\n\nDIDComm V1 Example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"content\": \"Your hovercraft is full of eels.\"\n}\n\nDIDComm V2 Example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"lang\": \"en\",\n    \"created_time\": 1547577721,\n    \"body\": {\n        \"content\": \"Your hovercraft is full of eels.\"\n    }\n}\n\nL10n\nThe language  SHOULD be specified according to the method used in the DIDComm base protocol version.\nImplementations\nEndnotes\n1 Out of Scope\nThere are many useful features of user messaging systems that we will not be adding to this protocol. We anticipate the development of more advanced and full-featured message protocols to fill these needs. Features that are considered out of scope for this protocol include:\n\nread receipts\nemojii responses\ntyping indicators\nmessage replies (threading)\nmulti-party (group) messages\nattachments"},{"slug":"out-of-band/2.0/","title":"Out Of Band","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The Out Of Band protocol defined in the DIDComm Messaging Spec. This enables encoding of messages within QR code and URLs","modifiedDate":"Sat Oct 09 2021 16:02:10 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/out-of-band/2.0","html":"Details\nThis Protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#out-of-band-messages"},{"slug":"report-problem/2.0/","title":"Report Problem","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The Report Problem protocol is defined in the DIDComm Messaging Spec. This protocol describes sending a problem report to another party.","modifiedDate":"Sat Oct 09 2021 16:31:44 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/report-problem/2.0","html":"Details\nThis Spec is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#problem-reports"},{"slug":"routing/2.0/","title":"Routing","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The routing protocol defined in the DIDComm Messaging Spec. This enables the message sender to package the final message on a route shared by the message recipient.","modifiedDate":"Sat Oct 09 2021 16:07:53 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/routing/2.0","html":"Details\nThis protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#routing-protocol"},{"slug":"trust-ping/2.0/","title":"Trust Ping","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The trust-ping protocol defined in the DIDComm Messaging Spec. This enables the sender and recipient to exchange an exchange of trust pings.","modifiedDate":"Sat Oct 09 2021 16:18:21 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/trust-ping/2.0","html":"Details\nThis protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#trust-ping-protocol-20"}],"allLicenses":["MIT"]}},"staticQueryHashes":["3000541721","3766577012"]}